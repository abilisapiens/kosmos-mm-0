app-kosmos-1/
├── .venv/                      # Virtual environment managed by uv
├── data/
│   ├── external/               # Raw external data (e.g., population grids)
│   └── processed/              # Processed data (e.g., HOB maps as .npy)
├── docs/
│   ├── index.md                # MkDocs homepage
│   ├── project_structure.md    # Explanation of the project structure
│   ├── data_flow.md            # Explanation of the data pipeline
│   └── ...                     # Other documentation pages (API, tutorials)
├── notebooks/
│   └── full_simulation_demo.ipynb # Colab-friendly notebook for a full run
├── scripts/
│   ├── run_scenario.py         # Example script to run a full scenario from CLI
│   └── preprocess_data.py      # Script to process raw data into usable formats
├── src/
│   └── pair_model/
│       ├── __init__.py
│       ├── analysis/
│       │   ├── __init__.py
│       │   ├── population.py   # Calculate affected population
│       │   ├── risk_assessment.py # Generate CCDFs, histograms, stats
│       │   └── mapping.py      # Generate KML/GeoJSON for risk swaths
│       ├── core/
│       │   ├── __init__.py
│       │   └── orchestrator.py # Main class to run the full simulation pipeline
│       ├── inputs/
│       │   ├── __init__.py
│       │   ├── asteroid_properties.py # APIN-like property generation
│       │   ├── case_generator.py # Combine properties and orbits
│       │   └── orbital_parameters.py # Process CNEOS-like trajectory files
│       ├── simulation/
│       │   ├── __init__.py
│       │   ├── entry_model.py  # Fragment-Cloud Model (FCM) for atmospheric entry
│       │   └── damage_models/
│       │       ├── __init__.py
│       │       ├── base_damage_model.py # Abstract base class for damage models
│       │       ├── local_damage.py # Blast and Thermal models
│       │       ├── tsunami.py      # Tsunami inundation model
│       │       └── global_effects.py # Global climate effects model
│       └── utils/
│           ├── __init__.py
│           ├── constants.py    # Physical and model constants
│           ├── data_io.py      # Helpers for loading/saving data (HDF5, etc.)
│           └── geometry.py     # Geometric calculations (e.g., footprint shapes)
├── webapp/
│   └── app.py                  # Streamlit web application
├── pyproject.toml              # Project metadata and dependencies for uv
├── mkdocs.yml                  # MkDocs configuration
└── README.md                   # Project overview and setup instructions
